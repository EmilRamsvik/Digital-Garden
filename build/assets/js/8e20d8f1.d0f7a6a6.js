"use strict";(self.webpackChunkdigital_garden=self.webpackChunkdigital_garden||[]).push([[58061],{4470:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=s(85893),n=s(11151);const r={Finished:null,tags:["article","digital-garden","data-science","python"],created:"2024-01-06T15:04",updated:"2024-01-06T15:04"},o="Recommendation Systems",a={id:"AI/Data Science/Recommendation Systems",title:"Recommendation Systems",description:"There are two types of recommendation systems",source:"@site/docs/AI/Data Science/Recommendation Systems.md",sourceDirName:"AI/Data Science",slug:"/AI/Data Science/Recommendation Systems",permalink:"/docs/AI/Data Science/Recommendation Systems",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AI/Data Science/Recommendation Systems.md",tags:[{label:"article",permalink:"/docs/tags/article"},{label:"digital-garden",permalink:"/docs/tags/digital-garden"},{label:"data-science",permalink:"/docs/tags/data-science"},{label:"python",permalink:"/docs/tags/python"}],version:"current",frontMatter:{Finished:null,tags:["article","digital-garden","data-science","python"],created:"2024-01-06T15:04",updated:"2024-01-06T15:04"},sidebar:"gardenSidebar",previous:{title:"ML Design Sprint",permalink:"/docs/AI/Data Science/ML Design Sprint"},next:{title:"NLP",permalink:"/docs/AI/Language/NLP or LLM"}},c={},l=[{value:"Collaborative Filtering Systems",id:"collaborative-filtering-systems",level:3},{value:"Content-Based Systems",id:"content-based-systems",level:3},{value:"Warp",id:"warp",level:3}];function d(e){const t={a:"a",em:"em",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"recommendation-systems",children:"Recommendation Systems"}),"\n",(0,i.jsx)(t.p,{children:"There are two types of recommendation systems"}),"\n",(0,i.jsx)(t.h3,{id:"collaborative-filtering-systems",children:"Collaborative Filtering Systems"}),"\n",(0,i.jsx)(t.p,{children:"Collaborative filtering systems recommend items based on the preferences and behaviors of multiple users. Imagine it like a group of friends recommending movies to each other. If person A likes movies 1, 2, and 3, and person B likes movies 2, 3, and 4, the system might recommend movie 4 to person A and movie 1 to person B, assuming they have similar tastes."}),"\n",(0,i.jsx)(t.p,{children:"This system has two main approaches:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"User-Based Collaborative Filtering"}),": This is like asking your friends what they're watching. The system finds users similar to you and recommends items they liked but you haven\u2019t seen yet."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Item-Based Collaborative Filtering"}),': This is more like saying, "I liked this movie, what else is like it?" The system recommends items similar to those you\'ve already interacted with.']}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:'The key to collaborative filtering is the "wisdom of the crowd". It assumes that if users agreed in the past, they will agree in the future. For instance, in a movie recommendation system, if two users rated many movies similarly, they will likely have similar opinions on other movies.'}),"\n",(0,i.jsx)(t.h3,{id:"content-based-systems",children:"Content-Based Systems"}),"\n",(0,i.jsx)(t.p,{children:"Content-based systems recommend items by comparing the content of the items themselves and a user's profile. The system tries to figure out what you like based on the content you've interacted with. For example, if you frequently watch science fiction movies, the system will recommend other movies in that genre."}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s how it works:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Item Profiles"}),": Each item is characterized by a set of descriptors or terms. For movies, this might include the genre, director, actors, etc."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"User Profiles"}),": The system builds a profile for each user based on the characteristics of the items they have interacted with. In simple terms, it keeps track of the features you seem to prefer."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Recommendation"}),": The system matches user profiles with item profiles. It recommends items with content similar to what you've liked before."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"In content-based systems, the recommendations are directly related to the user's past behavior and do not involve other users' preferences. This system is more personalized but can suffer from a lack of diversity in recommendations since it's based solely on your previous actions."}),"\n",(0,i.jsx)(t.p,{children:"Both systems have their strengths and weaknesses, and often, modern recommendation engines use a hybrid approach (think Netflix), combining elements of both to provide more accurate and diverse suggestions."}),"\n",(0,i.jsx)(t.h3,{id:"warp",children:"Warp"}),"\n",(0,i.jsxs)(t.p,{children:["Weighted Approximate-Rank Pairwise loss (WARP loss) first introduced in\xa0",(0,i.jsx)(t.a,{href:"http://www.thespermwhale.com/jaseweston/papers/wsabie-ijcai.pdf",children:"WSABIE: Scaling Up To Large Vocabulary Image Annotation"}),"\xa0by Weston et. al. WARP is quite similar to BPR: you sample a positive and negative item for a user, predict for both, and take the difference. In BPR you then make the SGD update with this difference as a weight. In WARP, you only run the SGD update if you predict\xa0",(0,i.jsx)(t.em,{children:"wrong"}),", i.e. you predict the negative item has a higher score than the positive item. If you do not predict wrong, then you keep drawing negative items until you either get the prediction wrong or reach some cutoff value."]}),"\n",(0,i.jsx)(t.h1,{id:"links",children:"Links"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=9gBC9R-msAk",children:"Quick Tutorial"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://youtu.be/EgE0DUrYmo8?si=zh6W72ArlmTgK2es",children:"LightFM introduction and explanation by the person who made it. "})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://www.ethanrosenthal.com/2016/11/07/implicit-mf-part-2/",children:"Learning to Rank"})," About implicit ranking algoritms."]}),"\n"]}),"\n",(0,i.jsx)(t.h1,{id:"thoughts",children:"Thoughts"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>o});var i=s(67294);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);